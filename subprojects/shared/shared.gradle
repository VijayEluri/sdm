// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// Contributor(s): Contributors are attributed in the source code
// where applicable.
// 
// The Original Code is "Stamdata".
// 
// The Initial Developer of the Original Code is Trifork Public A/S.
// 
// Portions created for the Original Code are Copyright 2011,
// LÃ¦gemiddelstyrelsen. All Rights Reserved.
// 
// Portions created for the FMKi Project are Copyright 2011,
// National Board of e-Health (NSI). All Rights Reserved.

configurations {
	db
}

dependencies {
	compile 'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0.Final'
	compile libs.commons_lang

	compile libs.reflections

	testCompile libs.junit
	testCompile libs.mockito

	compile(libs.commons_configuration) {
		exclude group: 'commons-logging'
	}

    db libs.mysql_driver
}


def runSql(sqlFile, database) {
        driver = 'com.mysql.jdbc.Driver'
        userid = 'root'
        password = ''
        ant.sql(src: sqlFile, print: false, driver: driver,
            url: "jdbc:mysql://localhost:3306/$database", userid: userid, password: password,
            onerror: 'abort', classpath: configurations.db.asPath)
    }

def sql(sqlQuery, database, printResult) {
        driver = 'com.mysql.jdbc.Driver'
        userid = 'root'
        password = ''
        ant.sql(sqlQuery, print: printResult, driver: driver,
            url: "jdbc:mysql://localhost:3306/$database", userid: userid, password: password,
            onerror: 'abort', classpath: configurations.db.asPath)
    }

task bootstrap << {
    database = "sdm_warehouse"
    System.out.println("Dropping database ${database}")
    sql("drop database ${database}", "mysql", false)
    System.out.println("Creating database ${database}")
    sql("create database ${database}", "mysql", false)
    
    System.out.println("Loading schema into ${database}")
    runSql("${rootDir}/db/schema.sql", "${database}")

    System.out.println("Tables in ${database}:")
    sql("show tables", "${database}", true)
}

test.enabled = false
