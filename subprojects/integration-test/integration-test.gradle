// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// Contributor(s): Contributors are attributed in the source code
// where applicable.
//
// The Original Code is "Stamdata".
//
// The Initial Developer of the Original Code is Trifork Public A/S.
//
// Portions created for the Original Code are Copyright 2011,
// LÃ¦gemiddelstyrelsen. All Rights Reserved.
//
// Portions created for the FMKi Project are Copyright 2011,
// National Board of e-Health (NSI). All Rights Reserved.

configurations {
	db
	cargo
	tomcat
}

dependencies {
	compile project(':shared')
	compile project(':client')
	testCompile libs.junit
	testCompile libs.hamcrest
	testCompile libs.mockito
	
	db libs.mysql_driver

	cargo('org.codehaus.cargo:cargo-ant:1.1.0') {
		exclude module: 'cargo-core-container-resin'
		exclude module: 'cargo-core-container-geronimo'
		exclude module: 'cargo-core-container-glassfish'
		exclude module: 'cargo-core-container-jboss'
		exclude module: 'cargo-core-container-jetty'
		exclude module: 'cargo-core-container-jo'
		exclude module: 'cargo-core-container-jonas'
		exclude module: 'cargo-core-container-jrun'
		exclude module: 'cargo-core-container-orion'
		exclude module: 'cargo-core-container-weblogic'
	}

	tomcat libs.hibernate_entitymanager
}

ant.taskdef(resource: 'cargo.tasks', classpath: configurations.cargo.asPath)

def runSql(sqlFile, database) {
	driver = 'com.mysql.jdbc.Driver'
	userid = 'root'
	password = ''
	ant.sql(src: sqlFile, print: true, driver: driver,
		url: "jdbc:mysql://localhost:3306/$database", userid: userid, password: password,
		onerror: 'abort', classpath: configurations.db.asPath)
}

task integrationTest(dependsOn: [':importer:war', ':lookup:war', ':integration-test:clean', ':integration-test:build']) << {
	initDb.execute()
	startServer.execute()
	loadData.execute()
	runIntegrationTest.execute()
	stopServer.execute()
}

task initDb << {
	runSql 'db/bootstrap.sql', 'test'
	runSql "$rootDir/db/schema.sql", 'sdm_warehouse'
	runSql "$rootDir/db/schema.sql", 'sdm_warehouse_ig'
}

task startServer << {
    logsDir = new File("$rootDir/subprojects/integration-test/logs")
    logsDir.mkdirs()
	ant.cargo(id: 'ig-server', containerId: "tomcat7x", output: "$logsDir/output.log", log: "$logsDir/cargo.log", action: "start", wait: "false") {
		zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.12/bin/apache-tomcat-7.0.12.zip')
		extraClasspath(path: configurations.tomcat.asPath)
		configuration {
			property(name: "tomcat-conf-home", value: "$rootDir/subprojects/integration-test/tomcat")
			property(name: "cargo.servlet.port", value: "8081")
			property(name: "cargo.ssl.servlet.port", value: "8444")
			property(name: "cargo.logging", value: "high")
			property(name: "cargo.jvmargs", value: "-Dsdm.environment=default,integrationtest")
			configfile(file: "$rootDir/subprojects/integration-test/tomcat/server.xml", toFile: "conf/server.xml")
			deployable(type: "war", file: "$rootDir/subprojects/importer/build/libs/importer-3.0.0-SNAPSHOT.war") {
				property(name: "context", value: "importer")
			}
			deployable(type: "war", file: "$rootDir/subprojects/lookup/build/libs/lookup-3.0.0-SNAPSHOT.war") {
				property(name: "context", value: "lookup")
			}
		}
	}
}

task loadData << {
	copy {
		from "$rootDir/subprojects/importer/src/test/resources/data/cpr/testEtablering/D100313.L431102"
		into '/pack/stamdata/input/cpr/input/'
	}
	sleep 2000
}

task runIntegrationTest(type: Test) {
	include '**/*IntegrationTest.*'
}
 
test {
	exclude '**/*IntegrationTest.*'
}

task stopServer << {
	ant.cargo(refId: "ig-server", action: "stop")
}